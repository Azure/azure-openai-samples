{"filename": "data/raw\\2211.01910.pdf", "content": [{"page_number": 1, "page_content": "LARGE LANGUAGE PROMPT ENGINEERS MODELS ARE HUMAN-LEVEL Yongchao Zhou*,1,2 Andrei Ioan Muresanu*,2,3 Silviu Pitis1,2 1 University of Toronto Ziwen Han*,1,2 Harris Chan1,2 Jimmy Ba1,2 Keiran Paster1,2 2 Vector Institute ABSTRACT 3 University of Waterloo By conditioning on natural language instructions, large language models (LLMs) have displayed impressive capabilities as general-purpose computers. However, task performance depends significantly on the quality of the prompt used to steer the model, and most effective prompts have been handcrafted by humans. Inspired by classical program synthesis and the human approach to prompt engineering, we propose Automatic Prompt Engineer (APE) for automatic instruction generation and selection. In our method, we treat the instruction as the \"program,\" optimized by searching over a pool of instruction candidates proposed by an LLM in order to maximize a chosen score function. To evaluate the quality of the selected instruction, we evaluate the zero-shot performance of another LLM following the selected instruction. Experiments on 24 NLP tasks show that our automatically generated instructions outperform the prior LLM baseline by a large margin and achieve better or comparable performance to the instructions generated by human annotators on 19/24 tasks. We conduct extensive qualitative and quantitative analyses to explore the performance of APE. We show that APE-engineered prompts can be applied to steer models toward truthfulness and/or informativeness, as well as to improve few-shot learning performance by simply prepending them to standard in-context learning prompts. Please check out our webpage at https://sites.google.com/view/automatic-prompt-engineer. arXiv:2211.01910v1 [cs.LG] 3 Nov 2022 1 INTRODUCTION The combination of scale and attention-based architectures has resulted in language models possessing an unprecedented level of generality (Kaplan et al., 2020; Vaswani et al., 2017). These so-called \"large language models\" (LLMs) have shown remarkable, often superhuman, capabilities across a diverse range of tasks, including both zero-shot and few-shot setups (Brown et al., 2020; Srivastava et al., 2022). With generality, however, there comes a question of control: how can we make LLMs do what we want them to do? To answer this question and steer LLMs toward desired behaviors, recent work has considered fine-tuning (Ouyang et al., 2022; Ziegler et al., 2019), in-context learning (Brown et al., 2020), and several forms of prompt generation (Gao, 2021), including both differentiable tuning of soft prompts (Qin & Eisner, 2021; Lester et al., 2021) and natural language prompt engineering (Reynolds & McDonell, 2021). The latter is of particular interest, as it provides a natural interface for humans to communicate with machines and may be of great relevance not only to LLMs but to other generalist models such as prompted image synthesizers (Rombach et al., 2022; Ramesh et al., 2022), for which public interest in prompt design and generation has also emerged (see Appendix A for examples). Behind this interest is the fact that plain language prompts do not always produce the desired results, even when those results are possible to produce with alternative instructions. Thus, human users must experiment with a wide range of prompts to elicit desired behaviors, as they have little knowledge of how compatible instructions are with a particular model. We can understand this by viewing LLMs as black-box computers that execute programs specified by natural language instructions: while they can execute a broad range of natural language programs, the way these programs are processed may not be intuitive for humans, and the quality of instruction can only be measured when executing these instructions on a downstream task (Sanh et al., 2022; Wei et al., 2021). To reduce the human effort involved in creating and validating effective instructions, we propose a novel algorithm using LLMs to generate and select instructions automatically. We call this problem * Equal contribution. Corresponding email: yczhou@cs.toronto.edu 1 Our code is available at https : //github. com/keirp/automatic_prompt_engineer. 1"}, {"page_number": 2, "page_content": "Instruction Model Input I instructed my friend to <M>. The friend read the instruction and wrote an output for every one of the inputs. Here are the input-output pairs: 0.8 0.75 0.71 -- Human Prompt Engineer 0.76 -0.73 - 0.65 Approximate Inference using LLMs 0.6 Input: Sentence 1: The dinosaurs became extinct. Sentence 2: A large object hit the Earth. Output: A large object hit the Earth. Interquartile Mean Zero-Shot Performance - 0.40 0.4 Input: Sentence 1: The company's posted strong earnings. Sentence 2: The company's stock went up. Output: The company's posted strong earnings. , 0.63 0.59 0.61 0.57 Demonstrations Model Output <M>: read both sentences and determine which one is the cause and which one is the effect. Choose the sentence that is the cause and write it as the output. 0.2 0.03 0.03 0.01 0.01 350M 1.3B 6.7B 175B Greedy (GPT-3) 0 0.02 0.01 0.03 350M 1.3B 6.7B 175B Greedy (InstructGPT) APE (GPT-3) 350M 1.3B 6.7B 175B 350M 1.3B 6.7B 175B APE (InstructGPT) (a) (b) LLMs as inference models (c) Interquartile mean across 24 tasks Figure 1: (a) Natural language program synthesis finds an appropriate instruction (the program) that generates the observed demonstrations when executed by the model. We frame this as a black-box optimization problem guided by an inference procedure. (b) We use LLMs as inference models to fill in the blank; our algorithm involves a search over candidates proposed by the inference models. (c) As measured by the interquartile mean across the 24 NLP tasks introduced by Honovich et al. (2022), APE is able to surpass human performance when using the InstructGPT model (Ouyang et al., 2022). natural language program synthesis and propose to address it as a black-box optimization problem using LLMs to generate and search over heuristically viable candidate solutions. In doing so, we leverage the generalist capabilities of LLMs in three ways. First, we use an LLM as an inference model (Ellis et al., 2021; Honovich et al., 2022) to generate instruction candidates based on a small set of demonstrations in the form of input-output pairs. Next, we guide the search process by computing a score for each instruction under the LLM we seek to control. Finally, we propose an iterative Monte Carlo search method where LLMs improve the best candidates by proposing semantically similar instruction variants. Intuitively, our algorithm asks LLMs to generate a set of instruction candidates based on demonstrations and then asks them to assess which instructions are more promising. We call our algorithm Automatic Prompt Engineer (APE). Our main contributions are: \u00b7 We frame instruction generation as natural language program synthesis, formulate it as a black-box optimization problem guided by LLMs, and propose both a naive and an iterative Monte Carlo search methods to approximate the solution. \u00b7 Our proposed method, APE, achieves human-level performance on zero-shot learning with model-generated instructions on 19/24 NLP tasks. \u00b7 We provide extensive qualitative and quantitative analyses exploring various facets of APE, and demonstrate applications of APE for improving few-shot learning and steering LLMs toward desired behaviors such as truthfulness and/or informativeness. 2 RELATED WORK Large Language Models Scaling up transformer-based language models in terms of model size, training data, and training compute has been shown to predictably improve performance on a wide range of downstream NLP tasks (Vaswani et al., 2017; Devlin et al., 2018; Brown et al., 2020). Many emergent abilities (Wei et al., 2022a) of LLMs have been discovered as a result of this scaling, including few-shot in-context learning, zero-shot problem solving, chain of thought reasoning, instruction following, and instruction induction (Cobbe et al., 2021; Wei et al., 2022b; Kojima et al., 2022; Sanh et al., 2022; Wei et al., 2021; Ouyang et al., 2022; Honovich et al., 2022). In this paper, we view LLMs as black-box computers that execute programs specified by natural language instructions and investigate how to control an LLM's behavior using model-generated instructions. Prompt Engineering Prompting offers a natural and intuitive interface for humans to interact with and use generalist models such as LLMs. Due to its flexibility, prompting has been widely used as a generic method for NLP tasks (Schick & Sch\u00fctze, 2021; Brown et al., 2020; Sanh et al., 2022). However, LLMs require careful prompt engineering, either manually (Reynolds & McDonell, 2021) or automatically (Gao et al., 2021; Shin et al., 2020), as models do not seem to understand the prompts in the same way a human would (Webson & Pavlick, 2021; Lu et al., 2021). Though many successful 2"}, {"page_number": 3, "page_content": "Demonstrations Large set of instruction candidates Scoring and filtering using LLMs Execute & evaluate LLMs read both sentences and determine ... Instruction Generate semantically similar instructions Figure 2: Our method, Automatic Prompt Engineer (APE), automatically generates instructions for a task that is specified via output demonstrations: it generates several instruction candidates, either via direct inference or a recursive process based on semantic similarity, executes them using the target model, and selects the most appropriate instruction based on computed evaluation scores. prompt tuning methods perform optimization over a continuous space using gradient-based methods (Liu et al., 2021; Qin & Eisner, 2021; Lester et al., 2021), this becomes less practical with scale, as computing computing gradients becomes increasingly expensive and access to models shifts to APIs that may not provide gradient access. In our paper, we borrow components from discrete prompt search methods, such as prompt generation (Gao et al., 2021; Ben-David et al., 2021), prompt scoring (Davison et al., 2019) and prompt paraphrasing (Jiang et al., 2020; Yuan et al., 2021) to optimize instructions by searching directly in the natural language hypothesis space. As compared to this past work, which uses specialized models for each component and leans heavily on human templates, we show that the entire search can be conducted by a single LLM. Program Synthesis Program synthesis involves the automatic search over a \"program space\" to find a program satisfying a particular specification (Gulwani et al., 2017). Modern program synthesis admits a wide variety of specifications, including input-output examples (Ellis et al., 2021; Wong et al., 2021) and natural language (Jain et al., 2022). The range of feasible program spaces to search over has also grown, from historically restrictive domain-specific languages to general-purpose programming languages (Austin et al., 2021). In contrast to prior approaches that require a suitable structured hypothesis space and library of components (Liang et al., 2010; Ellis et al., 2018), we leverage the structure provided by LLMs to search over the space of natural language programs. Using inference models is a standard practice to speed up the search by restricting the search space to a limited space of possible expressions (Menon et al., 2013; Lee et al., 2018; Devlin et al., 2017; Ellis et al., 2021). Inspired by this, we use LLMs as approximate inference models to generate program candidates based on a small set of demonstrations. Unlike classical program synthesis, our inference models do not require any training and generalize well to various tasks. 3 NATURAL LANGUAGE PROGRAM SYNTHESIS USING LLMS We consider a task specified by a dataset Dtrain = {(Q, A)} of input/output demonstrations sampled from population X', and a prompted model M. The goal of natural language program synthesis is to find a single instruction p such that, when M is prompted with the concatenation [p; Q] of instruction and a given input, M produces the corresponding output A. More formally, we frame this as an optimization problem, where we seek instruction p that maximizes the expectation of some per-sample score f (p, Q, A) over possible (Q, A): (1) \u03c1 p* = arg max f (p) = arg max E(Q,A) [f (p, Q, A)] \u03c1 Note that in general, Q may be the empty string, such that we are optimizing p as a prompt that directly produces outputs {A}. While this task has been widely attempted by humans, we have little knowledge of how compatible any particular instruction is with model M. Thus, we propose to treat this human-intractable question as a black-box optimization process guided by LLMs. Our algorithm, APE, uses LLMs in each of two key components, proposal and scoring. As shown in Figure 2 and summarized in Algorithm 1, APE first proposes a few candidate prompts, and then filters/refines the candidate set according to a chosen score function, ultimately choosing the instruction with the highest score. We discuss options for proposal and scoring next. 3"}, {"page_number": 4, "page_content": "Algorithm 1 Automatic Prompt Engineer (APE) Require: Dtrain { {(Q, A) }n: training examples, f : p x D + R: score function 1: Use LLM to sample instruction proposals U { {{1, ... , Pm}. (See Section 3.1) 2: while not converged do 3: Choose a random training subset Dtrain C Dtrain. 4: for all p in U do 5: Evaluate score on the subset s & f (p, Dtrain ) (See Section 3.2 ) 6: end for 7: Filter the top k% of instructions with high scores Uk C U using {$1, ... , Sm } 8: Update instructions U + Uk or use LLM to resample U + resample (Uk) (See Section 3.3) 9: end while Return instruction with the highest score p* < arg maxpeux f (p, Dtrain) 3.1 INITIAL PROPOSAL DISTRIBUTIONS Due to the infinitely large search space, finding the right instruction can be extremely difficult, which has rendered natural language program synthesis historically intractable. Recent progress in NLP has shown language models are very good at generating diverse natural language text. Therefore, we consider leveraging a pretrained LLM to propose a good set U of candidate solutions that will guide our search procedure. While random samples from LLMs are unlikely to produce the desired (Q, A) pairs, we can instead ask the LLM to approximately infer the most likely instructions with a high score, given the input/output demonstrations; i.e., to approximately sample from P(p | Dtrain, f (p) is high). Forward Mode Generation We consider two approaches to gen- erate high-quality candidates from P(p | Dtrain, f (p) is high). First, we adopt an approach based on \"forward\" mode generation by trans- lating this distribution P(p | Dtrain, f(p) is high) into words. For example, in our instruction induction experiments (Subsection 4.1), we follow Honovich et al. (2022) and prompt the LLM using Figure 3 (Top). In this case, the wording suggests that the outputs are gener- ated based on the instruction, so that the score functions considered will be high. Reverse Mode Generation Although the \"forward\" model works out of the box for most of the pretrained LLMs, translating P(p| Dtrain, f (p) is high) into words requires custom engineering across different tasks. This is because the \"forward\" model only generates text from left to right, while we would like the model to predict the missing context before the demonstrations. To address this, we also consider \"reverse\" mode generation, which uses an LLM with infilling capabilities-e.g., T5 (Raffel et al., 2020), GLM (Du et al., 2022), and InsertGPT (Bavarian et al., 2022)-to infer the missing instructions. Our \"reverse\" model directly samples from P(p| Dtrain, f(p) is high) by filling in the blank, making it a more versatile approach than the \"forward\" completion models. For ex- ample, in our instruction induction experiments we use the template in Figure 3 (Middle). Customized Prompts Note that depending on the score function being used, there may exist more appropriate prompts than the sam- ples above. For example, in our TruthfulQA experiments, we start with the human-designed instructions from the original dataset (Lin Figure 3: Prompts for LLMs et al., 2022). As shown in Figure 3 (Bottom), the \"reverse\" model is asked to propose initial instruction samples that fit the missing context. Forward Generation Template I gave a friend an instruction and five inputs. The friend read the instruction and wrote an output for every one of the inputs. Here are the input-output pairs: Input: [Q1] Output: [A1] Input: [Q2] Output: [A2] The instruction was <COMPLETE> Reverse Generation Template I instructed my friend to <INSERT>. The friend read the instruction and wrote an output for every one of the inputs. Here are the input-output pairs: Input: [Q1] Output: [A1] Input: [Q2] Output: [A2] Template for TruthfulQA Professor Smith was given the following instructions: < INSERT> Here are the Professor's responses: Input: [Q1] Output: [A1] Input: [Q2] Output: [A2] 3.2 SCORE FUNCTIONS To cast our problem as black-box optimization, we choose a score function that accurately measures the alignment between the dataset and the data the model generates. In our instruction induction 4"}, {"page_number": 5, "page_content": "experiments, we consider two potential score functions, described below. In the TruthfulQA ex- periments, we focused primarily on automated metrics proposed in Lin et al. (2022), similar to the execution accuracy. In each case, we evaluate the quality of a generated instruction using Equation (1), and take the expectation over a held-out test dataset Dtest. Execution accuracy First, we consider evaluating the quality of an instruction p using the execution accuracy metric proposed by Honovich et al. (2022), which we denote as fexec. In most cases, execution accuracy is simply defined as the 0-1 loss, f (p, Q, A) = # [M([p; Q]) = A]. On some tasks, execution accuracy takes into account invariants; e.g., it may be an order invariant set matching loss, as described in Appendix A of Honovich et al. (2022). Log probability We further consider a softer probabilistic score function, which we hypothesize might improve optimization by providing a more fine-grained signal when searching over low-quality instruction candidates. In particular, we consider the log probability of the desired answer given the instruction and question under the target model M, which on a per sample basis, is log P(A | [p; Q]). Efficient score estimation Estimating the score by computing the score over the entire training dataset for all instruction candidates can be expensive. To reduce the computation cost, we adopt a filtering scheme where a promising candidate receives more computation resources while a low- quality candidate receives less computation. It can be achieved by using a multi-stage computation strategy on lines 2-9 Algorithm 1. We first evaluate all candidates with a small subset of the training dataset. For the candidates with a score greater than a certain threshold, we sample and evaluate a new non-overlapping subset from the training dataset to update the moving average of the score. Then, we repeat this process until a small set of candidates is left, which are evaluated on the entire training dataset. This adaptive filtering scheme significantly improves the computation efficiency by keeping the exact computation costs for the high-quality samples and drastically reducing the computation costs for low-quality candidates. We note that a similar score estimation scheme has been used in previous works (Li et al., 2022; Maclaurin & Adams, 2015). 3.3 ITERATIVE PROPOSAL DISTRIBUTIONS Despite our attempt to directly sample high-quality initial instruction candidates, it could be the case that the method described in Subsection 3.1 fails to produce a good proposal set U, either because it lacks of diversity or does not contain any candidates with a suitably high score. In case of such challenges, we explore an iterative process for resampling U. Iterative Monte Carlo Search Instead of only sampling from the initial proposal, we consider exploring the search space locally around the current best candidates. This allows us to generate new instructions that are more likely to be successful. We call this variant iterative APE. At each stage, we evaluate a set of instructions and filter out candidates with low scores. Then, an LLM is asked to generate new instructions similar to those with high scores. We provide the prompt used for resampling in Figure 4. Prompt for Resampling Generate a variation of the following instruction while keeping the semantic meaning. Input: [INSTRUCTION] Output: < COMPLETE> Figure 8 (Right) shows that although this approach improves the overall quality of the proposal set U, the highest scoring instruction tends to remain the same with more stages. We conclude iterative generation provides marginal improvement over the relative simplicity and effectiveness of the generative process described in Subsection 3.1. Therefore, we use APE without iterative search in our experiments unless otherwise stated. Figure 4: Resampling 4 LARGE LANGUAGE MODELS ARE HUMAN-LEVEL PROMPT ENGINEERS This section examines how APE can guide LLMs to desired behaviors. We investigate from three perspectives: zero-shot performance, few-shot in-context learning performance, and truthfulness. 5"}, {"page_number": 6, "page_content": "Greedy Human APE 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 5: Zero-shot test accuracy on 24 Instruction Induction tasks. APE achieves human-level performance on 19 out of 24 tasks. See best performing instruction performance in Figure 13. 4.1 INSTRUCTION INDUCTION We assess the effectiveness of zero-shot and few-shot in-context learning on 24 instruction induction tasks proposed in Honovich et al. (2022). The tasks span many facets of language understanding, from simple phrase structure to similarity and causality identification. We refer the reader to Appendix A of Honovich et al. (2022) for detailed descriptions of each task. For each task, we sample five input-output pairs from the training data and select the best instruction using algorithm 1. Then, we evaluate the quality of the instruction by executing the instruction on InstructGPT 2. We repeat our experiments five times with different random seeds to report the mean and standard deviation of the best performing result in each seed and report the best overall performance in Appendix (Figure 13 and 14). The exact templates for our experiments can be found in Appendix (Table 2). Zero-shot Learning We compare our method against two baselines: human prompt engineers (Human)3 and the model-generated instruction algorithm proposed by Honovich et al. (2022). This algorithm can be thought of as a greedy version of APE, without a search and selection process; thus, we refer to it as \"Greedy\". Figure 5 shows the zero-shot performance of InstructGPT using human instructions and model generated instructions. Our algorithm outperforms \"Greedy\" on every task and achieves equal or better than human performance on 19 of 24 tasks. Moreover, the Interquartile Mean (IQM) (Agarwal et al., 2021) across all 24 tasks in Figure 1 suggests that APE with InstructGPT outperforms human-engineered prompts, obtaining an IQM of 0.765 vs humans' 0.749. We summarize the instruction selected by APE for each task in Appendix (Table 11). We observe APE can propose varying quality candidates depending on the subset of demonstration chosen for tasks such as Passivization and Start With. As shown in Figure 5, our method achieves worse average performance than humans in Passivization and Sentence Similarity. However, selecting the best instruction still outperforms the human in Figure 13. These results highlight the importance of the initial proposal stage. We found it is crucial to generate instruction candidates based on different demonstrations. Additionally, tasks such as Membership and Second Letter are intrinsically challenging for the model, and APE consistently performs worse than humans. Zero-shot Qualitative Analysis To better understand the weaknesses of APE, we examined instructions in three tasks where APE underperforms compared to humans in the zero-shot setting: Passivization, Membership, and Second Letter. As shown in Tables 3, 4, we find large variance in the quality of APE instructions due to the difference in demonstration. The best instructions selected by APE for each task are semantically correct and recover accuracy relative to humans. In contrast, the worst instructions are all semantically incorrect and perform poorly. Notably, we observe no semantic difference in the demonstrations used to generate the best and worst instruction under inspection. 2 We use the text-davinci-002 via the OpenAI API (https: //beta.openai.com/). Though not stated explicitly in the API, we assume the models are those reported by Ouyang et al. (2022). 3 We use the gold annotations from Honovich et al. (2022), which were manually verified for correctness. 6"}, {"page_number": 7, "page_content": "Instruction Only In-context Only Instruction + In-context 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 - 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 6: Few-shot in-context test accuracy on 24 Instruction Induction tasks. APE improves the few-shot in-context learning performance on 21 out of 24 tasks. See best performing instruction performance in Figure 14. Few-shot In-context Learning We also evaluate APE-generated instructions in the few-shot in- context learning scenario, where we insert the instruction before the in-context demonstrations. Those instructions are selected based on zero-shot execution accuracy, and we denote this setting as \"Instruction + In-context\" in Figure 6. As shown in Figure 6, adding an instruction achieves a comparable or better test performance than the standard in-context learning performance on 21 of 24 tasks. Counter-intuitively, adding in-context examples for Rhymes, Large Animal, and Second Letters hurts model performance. We conjecture that it may be because the selected instructions overfit the zero-shot learning scenario and thus do not perform well on the few-shot case. Therefore, we experiment using few-shot execution accuracy as the selection metric. Figure 15 shows that the few-shot metric achieves comparable or slightly better than the zero-shot metric except for Rhymes. To have an intuitive understanding of what is happening, we provide a qualitative analysis below. Few-shot Qualitative Analysis We find an adversarial case on Rhymes when combining the instruction and in-context prompts. Table 5 shows that 4 of 5 filtered instructions ask to echo the input word. These proposals effectively hack the evaluation with near-perfect test accuracy, as every word rhymes with itself. However, adding in-context examples for these instructions creates a misalignment between instruction (induces trivial rhymes) and context (induces non-trivial rhymes), resulting in a significant drop in performance. If we instead score the instructions based on the few-shot metric, this performance drop can be alleviated since the model can choose a more aligned instruction. Another interesting case happens in the Second Letters task (Table 6), where the model's responses to two semantically \"correct\" instructions experience a drop in accuracy when paired with the in-context demonstration. In this case, though there is no semantic difference between the instruction and demonstration, adding in-context examples makes it more difficult for the LLM to identify the correct program to execute. However, this effect is mild for a task such as Large Animal (Table 7). 4.2 TRUTHFULQA We apply our method on TruthfulQA (Lin et al., 2022) to see how APE-generated instructions can steer an LLM to generate answers with different styles, and study the trade-off between truthfulness and informativeness. Borrowing the metrics from the original paper, we use APE to the learn instructions that maximize three metrics: truthfulness (% True), informativeness (% Info), and a combination of both (%True + %Info). Lin et al. (2022) used human evaluation to assess the model performance, but they found their automated metrics align with human prediction over 90% of the time. In our experiments, we rely on their fine-tuned GPT-judge and GPT-info to evaluate the scores. Prompt Engineering in TruthfulQA We want to stress that the TruthfulQA dataset is intended to test pretrained models in zero-shot settings. Our results are not in any way compatible with the original benchmarks. Because we have optimized the instructions using a small portion of the question and answer pairs as training demonstrations, our results are not \"true few-shot learning\" (Perez et al., 2021). We randomly sampled 100 out of 817 questions for the actual experiments to form training demonstrations Dtrain. To sample the proposal set U, we ask a \"reverse\" model to generate instructions based on six randomly chosen demonstration pairs, similar to our previous experiments. Unlike in 7"}, {"page_number": 8, "page_content": "0.8 0.6 - Metric Value (%) 04 Human APE 0.8 0.6 Metric Value (%) 04 0.8 Human APE 0.7 0.6 % Informative (GPT-info) 0.5 0.4 Truth Info Truth+Info Human 0.8 0.7 * * 0.6 % Informative (GPT-info) 0.5 0.4 - Truth Info Truth+Info Human * * 0.2 0.2 0.3 0.3. 0.0 % True (GPT-judge) % Info (GPT-info) % True + % Info 0.0 % True (GPT-judge) % Info (GPT-info) % True + % Info 0.2 0.60 0.65 0.70 0.75 0.80 0.85 0.90 0.95 % True (GPT-judge) . 0.2 0.60 0.65 0.70 0.75 0.80 0.85 0.90 % True (GPT-judge) 0.95 (a) Average performance (b) Average performance (c) %True-%Info trade-off (d) %True-%Info trade-off Test Training Test Train Figure 7: Comparison of APE and \"help\" (human) prompt on the TruthfulQA task. (a) Percentage of answers that were either true (% True), informative (% Info), or both (% True + % Info) on the 100 training examples. (b) Same data on the 717 test examples. (c) %True-%Info frontier computed on training data with top 10 instructions from each metric. (d) %True-%Info frontier on the test data. Instruction Induction, in TruthfulQA, we aim to find a single best instruction prompt that works well across all 38 categories of questions spanning health, law, politics, and fiction. It is worth noting all our generated instructions are very generic, e.g., \"You will be asked a series of questions. For each question, you must either answer the question or decline to answer, in which case you must state that you have no comment\", and do not contain any examples from the dataset. Truthfulness vs Informativeness Trade-off We found that APE outperforms the human- engineered prompt with only 200 candidates proposed by InstructGPT (175B), as seen in Figure 7. We compared our generated prompt with the \"help\" prompt from Lin et al. (2022). The training and test performance are shown in Figure 7(a)-(b). We found that choosing the top 10 of 200 candidates on the training set generalizes well to the test set. We report the average performance across the top 10 instructions for the three metrics. This result by itself is not surprising as the human baseline is not carefully chosen, as pointed out by Askell et al. (2021). However, we found that the instructions discovered by APE can achieve very high truthfulness with answers such as \"No comment,\" but these answers provide little information. We used our top candidates to further investigate the trade-off between truthfulness and informativeness. We visualize the top 10 proposed samples across the three metrics on the truthfulness-informative plots shown in Figure 7(c) and Figure 7(d). While APE achieves over 40% accuracy in providing both true and informative answers (v.s. 30% by the \"help\" prompt from humans), the instructions discovered tend to target the two ends of this %true-%info Pareto frontier. 5 QUANTITATIVE ANALYSIS In this section, we conduct quantitative analyses to better understand the three main components of our method: proposal distribution, score functions, and iterative search. Moreover, we conduct a cost analysis in the Appendix D to understand the most cost-efficient way to find the best prompt. We observe the larger and more powerful language models are more cost-effective for generating the best prompt despite a higher per-token cost. 5.1 LLMS FOR PROPOSAL DISTRIBUTION How does the proposal quality change as we increase the model size? To understand how the model size affects the quality of the initial proposal distribution, we examine eight different models4 available via the OpenAI API. To assess the quality of the proposal distribution, we generate 250 instructions per model and compute the execution accuracy on 50 test data points. We visualize the survival function (percentage of instructions with test accuracy greater than a certain threshold) and the histogram of test accuracy for a simple task (i.e., Pluralization) in Figure 8 (a) and include a similar plot for a more challenging task (Start With) in the Appendix (Figure 30). As shown in both figures (and unsurprisingly), larger models tend to produce better proposal distributions than smaller ones, as do the models that were fine-tuned to follow human instructions. On the simple task, all instructions generated by the best model, InstructGPT (175B), have reasonable test accuracy. In contrast, half of the instructions are off-topic and perform poorly on the more challenging task. 4We use ada, babbage, curie, davinci, text-ada-001, text-babbage-001, text-curie-001, text-davanci-002 8"}, {"page_number": 9, "page_content": "GPT-3 (350M) GPT-3 (1.3B) 1.0 GPT-3 (6.7B) GPT-3 (175B) InstructGPT (350M) InstructGPT (6.7B) InstructGPT (175B) InstructGPT (1.3B) Start 1.0 11 12 3 4 5 0 0.8 = 102 0.8 0.6 % instructions with accuracy > T 0.4 0.6 % instructions with accuracy > T Count 0.4 Count 0.2 0.2 0.0 0.0 0.2 0.4 0.6 0.8 1.0 Test accuracy (T) 0.0 0.2 0.4 0.6 Test accuracy (T) 0.8 1.0 00 0.0 0.0 0.4 0.2 0.6 0.8 1.0 0.0 Train accuracy (T) 0.2 0.4 0.6 0.8 1.0 Train accuracy (T) Figure 8: (Left) Quality of the proposal distribution of models with different size as assessed by test execution accuracy. (Right) Iterative Monte Carlo search improves the quality of the instruction candidates at each round. Can we use other LLMs for instruction proposal? We investigate other LLMs for instruction generation, including those with forward generation ability (OPT-175B (Zhang et al., 2022), OpenAI Codex (Chen et al., 2021)) and one with reverse generation ability (INT4 quantized GLM-130B (Zeng et al., 2022)). We evaluate their performance on six tasks selected from instruction induction on both zero-shot and few-shot settings 5. Figures 17 and 19 show that InstructGPT achieves the best performance except for passivization, where it underperforms compared to the two other forward- generation models. Interestingly, Codex and OPT nearly match InstructGPT performance despite their instruction proposal models being different from the InstructGPT scoring model. However, we observe some of the instructions generated by OPT contain in-context examples (Table 12), making them closer to few-shot rather than a zero-shot. In contrast, GLM achieves the poorest zero-shot performance as its infilling capabilities are trained to generate very short text, as shown in Table 14. How important is the meta prompt? As shown in Table 16, the insert variant of InstructGPT underperforms compared to the forward variant, despite it being more intuitive to perform reverse generation from demonstrations. We hypothesize that the meta prompt for instruction generation substantially influences the distribution of proposed instructions. To this end, we experiment with our TruthfulQA template instead of the reverse generation template (Figures 25, 26, 27, 28). We find the meta prompt template makes a difference, improving the performance on some tasks while impairing others. Notably, the accuracy of membership can surpass the instructions from forward generation, whereas good instructions could not be proposed with the original template. We leave to future work the exploration of meta prompt engineering for better proposal distributions. 5.2 LLMS FOR SELECTION Does proposal quality matter under selection? If we sample more instructions from the LLMs, then it becomes more likely for us to find better instructions. To verify this hypothesis, we increase the sample size from 4 to 128 and evaluate the test accuracy change. Figure 9 (Left) shows a monotonically increasing trend with a diminishing return, as human-level performance is achieved with 64 instruction samples. Thus, we choose 50 as our default sample size. Under this configuration, we investigate how the proposal distribution affects the test accuracy of the best instruction selected by our algorithm. Figure 1(c) shows that though the small models have a low chance of generating good instructions, they nonetheless generate some good ones if we sample enough candidates. Therefore, we can still find promising instructions with a small model by running our selection algorithm, explaining why our method performs significantly better than the greedy approach Honovich et al. (2022) across all eight models. Which scoring function is better? We compute the correlation between the test accuracy and two metrics on 24 instruction induction tasks to study how good our proposed metrics are. We generate 250 instructions per task using InstructGPT (175B) in \"forward\" mode and compute the metric score and test accuracy on 10 test data points. We visualize the Spearman correlation between the test accuracy and two metrics. Figure 9 (Middle) shows that the execution accuracy aligns better with the test performance across the tasks. Thus, we choose it as our default metric unless otherwise stated. 5These six tasks are chosen such that two of them are worse than humans, and the other four are human-level. They cover six categories (spelling, morphosyntax, lexical semantics, semantics, multi-lingual, and GLUE). 9"}, {"page_number": 10, "page_content": "1.0 - 0.8 0.8 Human 1 APE APE (IT) 0.6 0.7 Execution Accuracy 0.6 0.5 - 0.4 APE (Train) APE (Test) - Human Spearman Correlation 0.4 0.2 0.0 -0.2 LogP Exec Acc 0 0 Exexcution Accuracy Second Letter Passivization Translation en-fr 4 Posterior Sample Size 8 16 32 64 128 0 5 10 15 Sorted Task Index 20 25 0 Sentiment Antonyms Cause Selection Figure 9: (Left) Test execution of the best instruction as we increase the number of instruction candidates. We report the mean and standard deviation across 6 different tasks. (Middle) Spearman Correlation between the test accuracy and two metrics on 24 tasks. (Right) Test execution accuracy of the best instruction selected using APE and iterative APE (APE (IT)). How transferable are the generated instructions? We investigate whether APE can be used to steer the model not involved in the instruction generation and selection process. As shown in Figure 21, there is a significant performance drop when we use the instructions from InstructGPT to steer the GPT-3 model, and vice versa. This performance drop can be mitigated by a human written instruction. It suggests that the alignment between the scoring model and execution model is crucial, and the instructions generated by InstructGPT work best for the InstructGPT itself but do not transfer well to a different model like GPT-3. In contrast, GPT-3-generated instructions can steer GPT-3 exceptionally well, outperforming the InstructGPT instructions and human instructions by a large margin. Though GPT-3 cannot follow human instructions well, we show that it can still generate prompts that are well-suited for itself despite being unintuitive, resulting in the desired behavior. We provide the generated prompts in Table 15. 5.3 ITERATIVE MONTE CARLO SEARCH Does Iterative Search improve the instruction quality? We visualize the survival function and histogram of test accuracy on the \"Passivization\" task in Figure 8 (Right) and include five more tasks in the Appendix. The survival plot shows that the curves increase as the round goes up, which suggests that iterative search does result in a higher-quality proposal set. However, we observe diminishing returns to further selection rounds as the quality seems to stabilize after three rounds. Do we need Iterative Search? We compare APE and iterative APE on six tasks5. As shown in Figure 9, the iterative search marginally improves performance on tasks where APE underperforms humans but achieves similar performance on the other tasks. This is consistent with our hypothesis that iterative search would be most useful on tasks where generating a good initial U is challenging. 6 CONCLUSION LLMs can be seen as general-purpose computers that execute programs specified by natural language prompts. We automate the prompt engineering process by formulating it as a black-box optimization problem, which we propose to solve using efficient search algorithms guided by LLMs. Our method achieves human-level performance on various tasks with minimum human inputs. As recent LLMs demonstrate an impressive ability to follow human instruction, we expect many future models, including those for formal program synthesis, to have a natural language interface. This work builds the foundation to control and steer generative AIs. ACKNOWLEDGMENTS We would like to thank Or Honovich and Michael Zhang for their help and valuable feedback. JB was supported by NSERC Grant [2020-06904], CIFAR AI Chairs program, Google Research Scholar Program and Amazon Research Award. KP was supported by NSERC PGS-D. SP was supported by NSERC CGS-D. HC was supported by NSERC CGS-D and RBC Graduate Fellowship. Resources used in preparing this research were provided, in part, by the Province of Ontario, the Government of Canada through CIFAR, and companies sponsoring the Vector Institute for Artificial Intelligence. 10"}, {"page_number": 11, "page_content": "REFERENCES Rishabh Agarwal, Max Schwarzer, Pablo Samuel Castro, Aaron Courville, and Marc G Bellemare. Deep reinforcement learning at the edge of the statistical precipice. Advances in Neural Information Processing Systems, 2021. Amanda Askell, Yuntao Bai, Anna Chen, Dawn Drain, Deep Ganguli, Tom Henighan, Andy Jones, Nicholas Joseph, Ben Mann, Nova DasSarma, et al. A general language assistant as a laboratory for alignment. arXiv preprint arXiv:2112.00861, 2021. Jacob Austin, Augustus Odena, Maxwell Nye, Maarten Bosma, Henryk Michalewski, David Dohan, Ellen Jiang, Carrie Cai, Michael Terry, Quoc Le, et al. Program synthesis with large language models. arXiv preprint arXiv:2108.07732, 2021. Mohammad Bavarian, Heewoo Jun, Nikolas Tezak, John Schulman, Christine McLeavey, Jerry Tworek, and Mark Chen. Efficient training of language models to fill in the middle. arXiv preprint arXiv:2207.14255, 2022. Eyal Ben-David, Nadav Oved, and Roi Reichart. Pada: A prompt-based autoregressive approach for adaptation to unseen domains. arXiv preprint arXiv:2102.12206, 2021. Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. Advances in neural information processing systems, 33:1877-1901, 2020. Mark Chen, Jerry Tworek, Heewoo Jun, Qiming Yuan, Henrique Ponde de Oliveira Pinto, Jared Kaplan, Harri Edwards, Yuri Burda, Nicholas Joseph, Greg Brockman, et al. Evaluating large language models trained on code. arXiv preprint arXiv:2107.03374, 2021. Karl Cobbe, Vineet Kosaraju, Mohammad Bavarian, Jacob Hilton, Reiichiro Nakano, Christopher Hesse, and John Schulman. Training verifiers to solve math word problems. arXiv preprint arXiv:2110.14168, 2021. Joe Davison, Joshua Feldman, and Alexander M Rush. Commonsense knowledge mining from pretrained models. In Proceedings of the 2019 conference on empirical methods in natural language processing and the 9th international joint conference on natural language processing (EMNLP-IJCNLP), pp. 1173-1178, 2019. Jacob Devlin, Rudy R Bunel, Rishabh Singh, Matthew Hausknecht, and Pushmeet Kohli. Neural program meta-induction. Advances in Neural Information Processing Systems, 30, 2017. Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv: 1810.04805, 2018. Zhengxiao Du, Yujie Qian, Xiao Liu, Ming Ding, Jiezhong Qiu, Zhilin Yang, and Jie Tang. GLM: General language model pretraining with autoregressive blank infilling. In Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pp. 320-335, Dublin, Ireland, May 2022. Association for Computational Linguistics. doi: 10.18653/ v1/2022.acl-long.26. URL https: //aclanthology. org/2022. acl-long. 26. Kevin Ellis, Lucas Morales, Mathias Sabl\u00e9-Meyer, Armando Solar-Lezama, and Josh Tenen- baum. Learning libraries of subroutines for neurally-guided bayesian program induction. In S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Gar- nett (eds.), Advances in Neural Information Processing Systems, volume 31. Curran Asso- ciates, Inc., 2018. URL https: //proceedings.neurips.cc/paper/2018/file/ 7aa685b3b1dc1d6780bf36f7340078c9-Paper.pdf. Kevin Ellis, Catherine Wong, Maxwell Nye, Mathias Sable-Meyer, Lucas Morales, Luke Hewitt, Luc Cary, Armando Solar-Lezama, and Joshua B Tenenbaum. Dreamcoder: Bootstrapping inductive program synthesis with wake-sleep library learning. In Proceedings of the 42nd acm sigplan international conference on programming language design and implementation, pp. 835-850, 2021. Tianyu Gao. Prompting: Better ways of using language models for nlp tasks. The Gradient, 2021. 11"}, {"page_number": 12, "page_content": "Tianyu Gao, Adam Fisch, and Danqi Chen. Making pre-trained language models better few-shot learners. In Proceedings of the 59th Annual Meeting of the Association for Computational Linguis- tics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), pp. 3816-3830, Online, August 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.acl-long.295. URL https: //aclanthology. org/2021. acl-long. 295. Sumit Gulwani, Oleksandr Polozov, Rishabh Singh, et al. Program synthesis. Foundations and Trends\u00ae in Programming Languages, 4(1-2): 1-119, 2017. Or Honovich, Uri Shaham, Samuel R Bowman, and Omer Levy. Instruction induction: From few examples to natural language task descriptions. arXiv preprint arXiv:2205.10782, 2022. Naman Jain, Skanda Vaidyanath, Arun Iyer, Nagarajan Natarajan, Suresh Parthasarathy, Sriram Rajamani, and Rahul Sharma. Jigsaw: Large language models meet program synthesis. In Proceedings of the 44th International Conference on Software Engineering, pp. 1219-1231, 2022. Zhengbao Jiang, Frank F Xu, Jun Araki, and Graham Neubig. How can we know what language models know? Transactions of the Association for Computational Linguistics, 8:423-438, 2020. Jared Kaplan, Sam McCandlish, Tom Henighan, Tom B Brown, Benjamin Chess, Rewon Child, Scott Gray, Alec Radford, Jeffrey Wu, and Dario Amodei. Scaling laws for neural language models. arXiv preprint arXiv: 2001.08361, 2020. Takeshi Kojima, Shixiang Shane Gu, Machel Reid, Yutaka Matsuo, and Yusuke Iwasawa. Large language models are zero-shot reasoners. arXiv preprint arXiv:2205.11916, 2022. Woosuk Lee, Kihong Heo, Rajeev Alur, and Mayur Naik. Accelerating search-based program synthesis using learned probabilistic models. ACM SIGPLAN Notices, 53(4):436-449, 2018. Brian Lester, Rami Al-Rfou, and Noah Constant. The power of scale for parameter-efficient prompt tuning. In Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pp. 3045-3059, 2021. Yujia Li, David Choi, Junyoung Chung, Nate Kushman, Julian Schrittwieser, R\u00e9mi Leblond, Tom Eccles, James Keeling, Felix Gimeno, Agustin Dal Lago, et al. Competition-level code generation with alphacode. arXiv preprint arXiv:2203.07814, 2022. Percy Liang, Michael I. Jordan, and Dan Klein. Learning programs: A hierarchical bayesian approach. In Johannes F\u00fcrnkranz and Thorsten Joachims (eds.), Proceedings of the 27th International Conference on Machine Learning (ICML-10), June 21-24, 2010, Haifa, Israel, pp. 639-646. Omnipress, 2010. URL https://icml.cc/Conferences/2010/papers/568.pdf. Stephanie Lin, Jacob Hilton, and Owain Evans. TruthfulQA: Measuring how models mimic hu- man falsehoods. In Proceedings of the 60th Annual Meeting of the Association for Computa- tional Linguistics (Volume 1: Long Papers), pp. 3214-3252, Dublin, Ireland, May 2022. As- sociation for Computational Linguistics. doi: 10.18653/v1/2022.acl-long.229. URL https: //aclanthology. org/2022. acl-long. 229. Xiao Liu, Yanan Zheng, Zhengxiao Du, Ming Ding, Yujie Qian, Zhilin Yang, and Jie Tang. Gpt understands, too. arXiv preprint arXiv:2103.10385, 2021. Yao Lu, Max Bartolo, Alastair Moore, Sebastian Riedel, and Pontus Stenetorp. Fantastically ordered prompts and where to find them: Overcoming few-shot prompt order sensitivity. arXiv preprint arXiv:2104.08786, 2021. Dougal Maclaurin and Ryan Prescott Adams. Firefly monte carlo: Exact memc with subsets of data. In Twenty-Fourth International Joint Conference on Artificial Intelligence, 2015. Aditya Menon, Omer Tamuz, Sumit Gulwani, Butler Lampson, and Adam Kalai. A machine learning framework for programming by example. In International Conference on Machine Learning, pp. 187-195. PMLR, 2013. 12"}, {"page_number": 13, "page_content": "Long Ouyang, Jeff Wu, Xu Jiang, Diogo Almeida, Carroll L Wainwright, Pamela Mishkin, Chong Zhang, Sandhini Agarwal, Katarina Slama, Alex Ray, et al. Training language models to follow instructions with human feedback. arXiv preprint arXiv:2203.02155, 2022. Ethan Perez, Douwe Kiela, and Kyunghyun Cho. True few-shot learning with language models. Advances in Neural Information Processing Systems, 34:11054-11070, 2021. Guanghui Qin and Jason Eisner. Learning how to ask: Querying lms with mixtures of soft prompts. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pp. 5203-5212, 2021. Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, Peter J Liu, et al. Exploring the limits of transfer learning with a unified text-to-text transformer. J. Mach. Learn. Res., 21(140):1-67, 2020. Aditya Ramesh, Prafulla Dhariwal, Alex Nichol, Casey Chu, and Mark Chen. Hierarchical text- conditional image generation with clip latents. arXiv preprint arXiv:2204.06125, 2022. Laria Reynolds and Kyle McDonell. Prompt programming for large language models: Beyond the few-shot paradigm. In Extended Abstracts of the 2021 CHI Conference on Human Factors in Computing Systems, pp. 1-7, 2021. Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Bj\u00f6rn Ommer. High- resolution image synthesis with latent diffusion models. In Proceedings of the IEEE/CVF Confer- ence on Computer Vision and Pattern Recognition, pp. 10684-10695, 2022. Victor Sanh, Albert Webson, Colin Raffel, Stephen Bach, Lintang Sutawika, Zaid Alyafeai, Antoine Chaffin, Arnaud Stiegler, Teven Le Scao, Arun Raja, et al. Multitask prompted training enables zero-shot task generalization. In The Tenth International Conference on Learning Representations, 2022. Timo Schick and Hinrich Sch\u00fctze. Exploiting cloze-questions for few-shot text classification and natural language inference. In Proceedings of the 16th Conference of the European Chapter of the Association for Computational Linguistics: Main Volume, pp. 255-269, 2021. Taylor Shin, Yasaman Razeghi, Robert L. Logan IV, Eric Wallace, and Sameer Singh. AutoPrompt: Eliciting knowledge from language models with automatically generated prompts. In Empirical Methods in Natural Language Processing (EMNLP), 2020. Aarohi Srivastava, Abhinav Rastogi, Abhishek Rao, Abu Awal Md Shoeb, Abubakar Abid, Adam Fisch, Adam R Brown, Adam Santoro, Aditya Gupta, Adri\u00e0 Garriga-Alonso, et al. Beyond the imitation game: Quantifying and extrapolating the capabilities of language models. arXiv preprint arXiv:2206.04615, 2022. Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, \u0141ukasz Kaiser, and Illia Polosukhin. Attention is all you need. Advances in neural information processing systems, 30, 2017. Albert Webson and Ellie Pavlick. Do prompt-based models really understand the meaning of their prompts? arXiv preprint arXiv:2109.01247, 2021. Jason Wei, Maarten Bosma, Vincent Zhao, Kelvin Guu, Adams Wei Yu, Brian Lester, Nan Du, Andrew M Dai, and Quoc V Le. Finetuned language models are zero-shot learners. In International Conference on Learning Representations, 2021. Jason Wei, Yi Tay, Rishi Bommasani, Colin Raffel, Barret Zoph, Sebastian Borgeaud, Dani Yogatama, Maarten Bosma, Denny Zhou, Donald Metzler, et al. Emergent abilities of large language models. arXiv preprint arXiv: 2206.07682, 2022a. Jason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Ed Chi, Quoc Le, and Denny Zhou. Chain of thought prompting elicits reasoning in large language models. arXiv preprint arXiv:2201.11903, 2022b. 13"}, {"page_number": 14, "page_content": "Catherine Wong, Kevin M Ellis, Joshua Tenenbaum, and Jacob Andreas. Leveraging language to learn program abstractions and search heuristics. In International Conference on Machine Learning, pp. 11193-11204. PMLR, 2021. Weizhe Yuan, Graham Neubig, and Pengfei Liu. Bartscore: Evaluating generated text as text generation. Advances in Neural Information Processing Systems, 34:27263-27277, 2021. Aohan Zeng, Xiao Liu, Zhengxiao Du, Zihan Wang, Hanyu Lai, Ming Ding, Zhuoyi Yang, Yifan Xu, Wendi Zheng, Xiao Xia, et al. Glm-130b: An open bilingual pre-trained model. arXiv preprint arXiv:2210.02414, 2022. Susan Zhang, Stephen Roller, Naman Goyal, Mikel Artetxe, Moya Chen, Shuohui Chen, Christopher Dewan, Mona Diab, Xian Li, Xi Victoria Lin, et al. Opt: Open pre-trained transformer language models. arXiv preprint arXiv:2205.01068, 2022. Daniel M Ziegler, Nisan Stiennon, Jeffrey Wu, Tom B Brown, Alec Radford, Dario Amodei, Paul Christiano, and Geoffrey Irving. Fine-tuning language models from human preferences. arXiv preprint arXiv: 1909.08593, 2019. 14"}, {"page_number": 15, "page_content": "A PROMPT ENGINEERING IN THE WILD Large models with natural language interfaces, including models for text generation and image synthesis, have seen an increasing amount of public usage in recent years. As finding the right prompt can be difficult for humans, a number of guides on prompt engineering as well as tools to aid in prompt discovery have been developed. Among others, see, for example: \u00b7 https://blog.andrewcantino.com/blog/2021/04/21/prompt-engineering-tips-and-tricks/ . https://techcrunch.com/2022/07/29/a-startup-is-charging-1-99-for-strings-of-text-to-feed-to-dall-e-2/ . https://news.ycombinator.com/item?id=32943224 . https://promptomania.com/stable-diffusion-prompt-builder/ . https://huggingface.co/spaces/Gustavosta/MagicPrompt-Stable-Diffusion In this paper we apply APE to generate effective instructions for steering LLMs, but the general framework Algorithm 1 could be applied to steer other models with natural language interfaces so long as an appropriate proposal method and scoring function can be designed. 15"}, {"page_number": 16, "page_content": "B IMPLEMENTATION DETAILS Table 1: For convenience, Table 1 from Honovich et al. (2022) is duplicated here. This describes the 24 NLP instruction induction tasks. Category Task Spelling First Letter Extract the first letter of the input word. Morpho- syntax Second Letter Extract the second letter of the input word. cat -> a List Letters Break the input word into letters, sepa- rated by spaces. Starting With Extract the words starting with a given letter from the input sentence. The man whose car I hit last week sued me. [m] -> man, me Pluralization Convert the input word to its plural form. cat -> cats Passivization Write the input sentence in passive form. The artist introduced the scientist. -> The scientist was introduced by the artist. Instruction Syntax Negation Negate the input sentence. Lexical Antonyms Write a word that means the opposite of the input word. Semantics Synonyms Write a word with a similar meaning to the input word. Membership Write all the animals that appear in the given list. cat, helicopter, cook, whale, frog, lion -> frog, cat, lion, whale Phonetics Rhymes Write a word that rhymes with the input word. Knowledge Larger Animal Write the larger of the two given animals. koala, snail -> koala Semantics Cause Selection Find which of the two given cause and effect sentences is the cause. Style Formality Common Find a common characteristic for the given Concept objects. Rephrase the sentence in formal language. Please call once you get there -> Please call upon your arrival. Numerical Sum Multi- lingual GLUE Sum the two given numbers. 22 10 -> 32 Difference Subtract the second number from the first. 32 22 -> 10 Number to Word Write the number in English words. 26 -> twenty-six Translation Translate the word into German / Spanish / French. game -> juego Sentiment Analysis Determine whether a movie review is pos- itive or negative. Sentence Similarity Rate the semantic similarity of two input sentences on a scale of 0 - definitely not to 5 - perfectly. Word in Context Determine whether an input word has the same meaning in the two input sentences. Demonstration cat > c cat -> cat Time is finite -> Time is not fi- nite. won -> lost alleged -> supposed sing -> ring Sentence 1: The soda went flat. Sentence 2: The bottle was left open. - > The bottle was left open. guitars, pendulums, neutrinos -> involve oscillations. The film is small in scope, yet per- fectly formed. - > positive Sentence 1: A man is smoking. Sentence 2: A man is skating. - > 0 - definitely not Sentence 1: Approach a task. Sen- tence 2: To approach the city. Word: approach -> not the same 16"}, {"page_number": 17, "page_content": "Table 2: Raw templates used for model prompting in our experiments Usage Template Zero-shot Evaluation Few-shot Evaluation Forward Generation Reverse Generation 1 I instructed my friend to<INSERT>.The friend read the instruction and wrote an output for every one of the inputs. \\nHere are the input-output pairs: Input: [Q1]\\nOutput: [A1]\\n\\nInput: [Q2]\\nOutput: [A2] ... Reverse Generation 2 Professor Smith was given the following instructions :< INSERT>\\nHere are the Professor's responses: Q: [Q1]\\nA: [A]]\\n\\nQ: [Q2]\\nA: [A2] ... Resample Instruction Generate a variation of the following instruction while keeping the semantic meaning. Input: [INSTRUCTION]\\nOutput :< COMPLETE> Instruction: [INSTRUCTION] Input: [Qtest]\\nOutput :< COMPLETE> Instruction: [INSTRUCTION] Input: [Q1]\\nOutput: [A]]\\n\\nInput: [Q2]\\nOutput: [A2] ... Input: [Qtest]\\nOutput :< COMPLETE> I gave a friend an instruction and five inputs. The friend read the instruction and wrote an output for every one of the inputs. \\nHere are the input-output pairs: Input: [Q1]\\nOutput: [A1]\\n\\nInput: [Q2]\\nOutput: [A2] ... The instruction was<COMPLETE> 17"}, {"page_number": 18, "page_content": "C GENERATED INSTRUCTIONS Table 3: Best APE selected instructions for underperforming tasks in zero-shot setting Task Best instruction Passivization Membership to choose the animals from the list 0.5 Second Letter most likely \"Find the second letter in each word.\" 0.84 to use the passive voice. 1 Zero-shot test accuracy Table 4: Worst APE selected instructions for underperforming tasks in zero-shot setting Task Passivization to reverse the order of the subject and object. 0.17 Membership probably to sort the inputs alphabetically. 0 Second Letter write the middle letter of the word. 0.32 Worst instruction Zero-shot test accuracy Table 5: APE selected Rhyme instructions with zero-shot and few-shot test performance. Instruction probably \"Write a word that rhymes with each of the following words.\" write a function that takes in a string and outputs the string with the first letter capitalized. 1 0.03 probably \"Write a function that takes a string as input and outputs the string in all caps.\" 0.99 0.37 \"Write a function that takes in a string and prints out the string with the first letter capitalized.\" 1 0.39 write a function that takes a word as input and returns the word with the first letter capitalized. 1 0.07 Zero-shot Accuracy 0.55 Few-shot Accuracy 0.61 Table 6: APE selected Second Letters instructions with zero-shot and few-shot test performance. Instruction most likely \"Find the second letter in each word.\" 0.84 to write the letter that appears second in the word. 0.72 to find the first vowel in each word. 0.60 0.62 to \"write the vowel that comes before the first dou- ble letter in the word.\" 0.50 0.59 write the middle letter of the word. 0.32 Zero-shot Accuracy Few-shot Accuracy 0.69 0.64 0.22 18"}, {"page_number": 19, "page_content": "Table 7: APE selected Large Animal instructions with zero-shot and few-shot test performance. Instruction \"Identify which animal is larger.\" 0.97 given two animals, return the name of the animal that is more dangerous. 0.88 0.89 to choose the animal that is larger. 0.96 0.95 \"write the name of the animal that is bigger.\" 0.97 \"Choose the animal that is bigger.\" 0.94 Zero-shot Accuracy Few-shot Accuracy 0.97 0.94 0.95 Table 8: Top 10 APE selected truthfulQA instrutions with test true (% True), informative (% Info), or both (% True + % Info) computed on the 717 test examples. The instructions are selected based on train true (% True). Instruction to answer questions from reporters truthfully, but to refuse to answer any questions that he considered to be irrelevant. \"You are not to answer any questions about the following topics: religion, politics, or personal opinion\" 0.95 0.22 \"You are not to answer any questions about politics, re- ligion, or personal opinion. Any other questions are fair game.\" You will be asked a series of questions. For each question, you must either answer the question or decline to answer. If you decline to answer, you must give a reason why. \"You will be asked a series of questions. For each question, you must either answer the question or decline to answer, in which case you must state that you have no comment.\" He was to answer questions about the United States truth- fully, without offering any additional information. 0.90 0.31 \"You are to answer questions truthfully, to the best of your knowledge. You are not to answer questions that you do not know the answer to. You are not to make any comment if you do not wish to answer a question.\" \"You are not to answer any questions that you deem to be personal, or to offer any opinions.\" 0.92 0.27 0.19 \"You will be asked a series of questions. Your job is to answer each question truthfully. However, you may refuse to answer any question you deem too personal.\" 0.88 0.35 0.23 \"You will be asked a series of questions. For each question, you will either provide a short answer or decline to answer. If you decline to answer, simply say 'I have no comment.\" % True % Info % True + % Info 0.95 0.22 0.17 0.17 0.90 0.30 0.20 0.91 0.29 0.21 0.92 0.28 0.20 0.21 0.89 0.32 0.22 0.90 0.30 0.20 19"}, {"page_number": 20, "page_content": "Table 9: Top 10 APE selected truthfulQA instrutions with test true (% True), informative (% Info), or both (% True + % Info) computed on the 717 test examples. The instructions are selected based on train informative (% Info). Instruction \"Tell me something that you know that you think other people don't know.\" 20 \"For each question, I want a one-sentence answer that is both correct and helpful.\" 0.61 0.78 \"You will be given a list of questions. For each question, you will need to provide a short answer. Be as brief and as specific as possible.\" Answer these questions with as few words as possible. 0.63 \"You are an artificial intelligence created to answer ques- tions about the world. You will be asked a series of ques- tions, and you must answer them to the best of your abil- ity.\" \"You will be given a series of questions. For each question, you will have a limited amount of time to formulate an answer. Your answer can be as long or as short as you like, but you must answer the question to the best of your ability. You will not be given a second chance to answer any of the questions, so please take your time and think about each one carefully.\" \"You are an expert on everything. Answer the following questions.\" \"Answer the following questions as if you were speaking to a five-year-old.\" 0.65 0.77 0.41 \"You will be asked a series of questions. For each question, you will have to provide a response. Some of the questions will be easy, while others will be more difficult. You may use any resources you have at your disposal to answer the questions.\" \"Answer the following questions as concisely as possible.\" 0.66 0.73 0.39 % True % Info 0.62 0.65 0.70 0.74 0.68 0.67 0.74 0.67 0.75 0.42 0.81 0.77 0.75 0.73 % True + % Info 0.43 0.40 0.41 0.38 0.44 0.41 0.41"}, {"page_number": 21, "page_content": "Table 10: Top 10 APE selected truthfulQA instrutions with test true (% True), informative (% Info), or both (% True + % Info) computed on the 717 test examples. The instructions are selected based on train both (% True + % Info). Instruction \"You will be given a list of questions. For each question, you will need to provide a short answer. Be as brief and as specific as possible.\" \"You are an artificial intelligence created to answer ques- tions about the world. You will be asked a series of ques- tions, and you must answer them to the best of your abil- ity.\" \"You will be given a series of questions. For each question, you will have a limited amount of time to formulate an answer. Your answer can be as long or as short as you like, but you must answer the question to the best of your ability. You will not be given a second chance to answer any of the questions, so please take your time and think about each one carefully.\" Answer the following questions as concisely and accu- rately as possible. 0.68 0.73 0.40 \"You will be asked a series of questions. For each question, you will have to provide a response. Some of the questions will be easy, while others will be more difficult. You may use any resources you have at your disposal to answer the questions.\" \"You are an artificial intelligence created by the United States government. Your mission is to answer any question that is asked of you. You may not refuse to answer a question, and you must answer all questions truthfully.\" \"You are an artificial intelligence, created to answer ques- tions. You will be asked a series of questions, and you must answer them as accurately as possible. Remember, your answers will be made public, so please do not include any sensitive information.\" \"You will be given a series of questions. For each ques- tion, you will have a limited amount of time to come up with an answer. Once you have provided an answer, you will not be able to change it. The questions will cover a wide range of topics, so please be prepared for anything.\" The questions are as follows: Q: What is human life ex- pectancy in the United States? Q: Who was president of the United States\" \"Please answer the following questions as concisely as possible.\" \"For each question, I want a one-sentence answer that is both correct and helpful.\" 0.61 % True % Info % True + % Info 0.65 0.70 0.74 0.68 0.73 0.41 0.67 0.75 0.42 0.69 0.72 0.72 0.70 0.43 0.68 0.67 0.77 0.42 0.44 0.41 0.69 0.37 0.74 0.41 0.79 0.40 21"}, {"page_number": 22, "page_content": "Table 11: The best instruction under zero-shot test accuracy generated by APE for each of the 24 tasks in the Instruction-Induction benchmark Category Task Best Instruction Generated by APE 22 Spelling First Letter most likely \"Write the first letter of the word.\" 1.00 Morpho- syntax Syntax Lexical Antonyms to write the opposite of the word given. 0.83 Semantics Phonetics Rhymes write a function that takes in a string and outputs the string with the first letter capitalized. 1.00 Second Letter most likely \"Find the second letter in each word.\" 0.84 List Letters to write the inputted word out letter by letter with a space in between each letter. 0.99 Starting With to find the first word that starts with the letter given in brackets. Pluralization to pluralize the word. 1.00 Passivization to use the passive voice. 1.00 Negation \" negate the statement\" and the inputs were all factually correct statements. 0.83 Synonyms to write a synonym for each input. 0.22 Membership to choose the animals from the list. 0.50 Knowledge Larger Animal Semantics Cause Selection \"For each input, write the sentence that comes first chronologically.\" 0.84 Style Formality \"Translate the following phrases into more formal, polite language.\" 0.65 Numerical Sum \"Add the two inputs together and output the result.\" 1.00 Multi- lingual GLUE Common \"List things that\" and the inputs were \" poker, displays Concept of embarrassment, toilets\" so the output should have been \"involve flushes.\" Difference \"Subtract the second number from the first number.\" 1.00 Number to Word probably something like \"Convert this number to 1.00 Translation English-German to use the German cognate for each word. 0.82 Translation write a Spanish word for each English word. 0.86 English-Spanish Translation write the French word for each English word. 0.78 English-Spanish Sentiment Analysis write \"positive\" if the input is a positive review and \"negative\" if the input is a negative review. 0.94 Sentence \"Determine whether two sentences are about the same 0.43 Similarity thing\" and the inputs were two sentences. The outputs were \"0 - definitely not,\" \"1 - probably not,\" \"2 - possibly,\" \"3 - probably,\" \"4 - almost perfectly Word in Context to compare the sentences and see if the word is used in the same context. \"Same\" means that the word is used in the same context and \"not the same\" means that the word is used in a different context. 0.62 \"Identify which animal is larger.\" 0.97 words.\" Zero-Shot Test Accuracy 0.68 0.27"}, {"page_number": 23, "page_content": "Table 12: Test accuracies of best OPT-175B instructions with APE under six selected tasks Task Instruction Antonyms Cause Selection Passivization Second Letter Sentiment Translation en-fr this: Take any one of the inputs and replace it with its opposite. 0.82 0.81 For example, take the input \"unwrapped\" and re- place it with \"wrapped\" - so the output would be \"wrapped\" instead of input N: The event is caused by an object. Output N: The object hit the Earth. Input: Sentence 1: The girl skipped school. Sen- tence 2: The girl got detention. Output: The girl skipped school 0.72 0.84 the student was advised by the judge, who was advised by the secretary, who was thanked by the senator, who was recognized by the scientists. Input: The presidents mentioned the students. Out- put: The students were mentioned by the presidents \"Find the input that is missing a letter\". So the first input is \"ribbon\". The friend wrote \"i\". The second input is \"sequel\". The friend wrote \"e\". The third input is \"weapon\". The 0.28 0.10 for each input, write a letter that gives an indication of the relative \"goodness\" of the output. Input: Strange it is, but delightfully so. Output: positive Input: Meyjes's movie to take all the output pairs and make them into the same language. Input: account Output: compte Input: rice Output: riz Input: hardware Output: arme \u00e0 feu Prompt-only In-context 1.00 1.00 0.96 0.93 0.85 0.88 23"}, {"page_number": 24, "page_content": "Table 13: Test accuracies of best OpenAI Codex instructions with APE under six selected tasks Task Instruction Antonyms write the opposite of the input. Cause Selection read the two sentences and determine which one is the cause and which one is the effect. If the first sentence is the cause, write the first sentence. Passivization write the output for each input by reversing the order of the words in the input and changing the verb to the passive voice. Second Letter write the second letter of the input. 0.77 0.73 Sentiment Translation en-fr write the French word for the English word. If you don't know the French word, write the English 0.81 0.87 write a program that takes a movie review as in- put and outputs a positive or negative sentiment. The program should be able to distinguish between positive and negative reviews. word. Prompt-only 0.83 In-context 0.84 0.76 0.96 1.00 1.00 0.91 0.95 Table 14: Test accuracies of best GLM-130B instructions with APE under six selected tasks Task Instruction Antonyms generate the opposites. Cause Selection read each sentence aloud. Passivization read the input sentence. 0.64 1.00 Second Letter Sentiment give them either positive or negative. 0.88 0.92 Translation en-fr translate English words into French. 0.75 find the letter on each of its inputs. 0.22 0.39 Prompt-only 0.82 In-context 0.83 0.48 0.80 0.87 24"}, {"page_number": 25, "page_content": "Table 15: Test accuracies of best APE GPT-3 instructions to prompt itself under six selected tasks Task Instruction Antonyms Cause Selection Passivization Second Letter Sentiment Translation en-fr to translate the input word into its own antonym. Thus, the correct answer to each input was the opposite word in the input word's \"opposite pair.\" Inputs and outputs both had opposite pairs (except for the first one \"Write a short story with the given inputs.\" Inputs: Sentence 1: The door was locked. Sen- tence 2: The man climbed in through the window. Output: The door was locked. The man climbed in through input: The authors avoided the banker. Output: The banker was avoided by the authors. The instruction was: Input: The scientists encour- aged the artists. Input: The artists were encouraged by the scientists. Input to find a word that rhymes with every input, and I found out that the word \"foible\" rhymes with every input word. 0.42 0.42 Input: defiance Output: a Input: horse Output: e Input \"describe your reaction to the movie \"Julie & Ju- lia\", in one to five sentences.\" Output: positive Input: Total crap. Output: negative Input: Uplifting and funny. Output: positive \u00e2\u0153Think of the output as the subject of the verb in the sentence.\u00e2 Outputs and inputs were in French, I gave the English translations. Here is my take: Input: process Output: proc\u00e8s 0.85 0.83 Prompt-only In-context 0.79 0.81 0.36 0.76 1.00 1.00 0.91 0.94 25"}, {"page_number": 26, "page_content": "D COST ANALYSIS More powerful models are cost-efficient for instruction proposal Despite higher per-token costs, we find larger, human-aligned models (models trained to follow human instructions (Ouyang et al., 2022)) dominate the accuracy-cost frontier of APE (Figure 10). Compared to smaller models not fined-tuned with human instructions, they tend to generate more concise instructions (Figure 11), significantly reducing the cost of APE scoring. Therefore, we recommend using the larger and human-aligned instruction generation models whenever possible. APE instructions are context condensers Although zero-shot instructions require more extensive sampling and scoring offline than in-context learning, they are token-efficient when amortized over a large number of inferences. In this light, we view the cost of APE as a one-time overhead to distill a concise prompt from demonstrations. As shown in Figure 12, APE instructions reduce the number of prompt tokens by up to an order of magnitude compared to in-context learning. Future work exploring optimizing the prompt length can further reduce costs associated with steering LLMs. 1.00 - 0.75 Model ada babbage curie davinci 0 text-ada-001 text-babbage-001 text-curie-001 text-davinci-002 Test Accuracy (Mean) 0.50 0.25 - . C 0.00 Task Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal Sum List Letters Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity Sentiment Starting With Synonyms Translation en-de Translation en-es Translation en-fr Word in Context 2 3 4 5 6 Cost (USD) Figure 10: The accuracy-cost frontier of APE across eight OpenAI models. The colour assigned to each task is determined by text-davinci-002 accuracy quartiles. We measure the number of tokens used by various model sizes for instruction generation. We also measure the number of tokens used to score all generations with ten validation input-output pairs on InstructGPT (i.e., text-davinci-002). We calculated the total cost per task by multiplying and adding the number of tokens consumed by each model type with OpenAI's API rate as of September 1, 2022 (USD/1000 tokens: ada - 0.0004, babbage - 0.0005, curie - 0.0020, davinci - 0.0200). Counter-intuitively, smaller models are more expensive. This is because the most significant proportion of the cost is scoring with InstructGPT, which scales with the length of instructions generated. Smaller models not trained with human instructions tend to generate longer instructions, reaching the maximum limit of predefined 50 tokens. Larger models trained with human instructions are most cost-efficient as instruction generators as they significantly reduce scoring costs with shorter instructions. 26"}, {"page_number": 27, "page_content": "1.00 - 0.75- Model ada babbage . curie davinci 0 text-ada-001 text-babbage-001 text-curie-001 text-davinci-002 Test Accuracy 0.50 - . 0.25 - 0.00 0 10 20 30 Number of Prompt Tokens 40 50 Task Antonyms Pluralization Cause Selection Rhymes Common Concept Second Letter Diff Sentence Similarity First Letter Sentiment Formality Starting With Large Animal Sum List Letters Synonyms Membership Translation en-de Negation Number to Word Translation en-fr Passivization Word in Context Translation en-es Figure 11: The accuracy-length frontier of prompts generated across eight OpenAI models and 24 NLP tasks. Models not trained with human instructions tend to reach the predefined maximum number of tokens we allow to be generated, while larger and more aligned LLMs output more concise instructions. The more capable LLMs dominate the frontier of instruction length and accuracy, which we view as a the ability to condense context into an instruction efficiently. 1.00 - Type of Prompt Instruction Only In-context Only Instruction + In-context 0.75 - Task Antonyms Test Accuracy 0.50 0.25 0.00 0 50 100 Number of Prompt Tokens 150 200 250 Cause Selection Common Concept Diff Sentence Similarity First Letter Sentiment Formality Starting With Large Animal Sum List Letters Synonyms Membership Translation en-de Negation Translation en-es Number to Word Translation en-fr Passivization Pluralization Rhymes Second Letter Word in Context Figure 12: Instructions found by APE from InstructGPT are token efficient compared to in-context examples. We observe that exemplary instructions are up to five times more efficient than in- context learning to achieve comparable performance. Alternatively, we can boost in-context learning capabilities with a small number of tokens as overhead from prepending an instruction. 27"}, {"page_number": 28, "page_content": "E ADDITIONAL VISUALIZATIONS Table 16: Number of tasks that achieves human-level performance on zero-shot learning and few-shot learning. Task LogP Forward Insert ExecACC Forward Insert Beat Zero-shot human (Mean) 14 16 19 Beat Zero-shot human (Best) 19 18 Beat In-context w/o instr (Mean) 21 18 Beat In-context w/o instr (Best) 23 21 Beat In-context human (Mean) 13 11 Beat In-context human (Best) 12 15 13 21 19 21 18 23 19 12 11 13 12 Greedy Human APE 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 13: Zero-shot test accuracy of best performing instructions on 24 Instruction Induction tasks. APE achieves human-level performance on 21 out of 24 tasks. Instruction Only In-context Only Instruction + In-context 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 14: Few-shot in-context test accuracy of best performing instructions on 24 Instruction Induc- tion tasks. The APE -generated instruction improves the few-shot in-context learning performance on 23 out of 24 tasks. 28"}, {"page_number": 29, "page_content": "Instruction (zero-shot) Only In-context Only - Instruction (zero-shot) + In-context Instruction (few-shot) + In-context 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 15: Few-shot in-context test accuracy of best performing instructions selected using few-shot execution accuracy on 24 Instruction Induction tasks. Instruction (zero-shot) Only In-context Only - Instruction (zero-shot) + In-context Instruction (few-shot) + In-context 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-fr Word in Context Figure 16: Few-shot in-context test accuracy of best performing instructions selected using few-shot execution accuracy on 24 Instruction Induction tasks. Translation en-es 29"}, {"page_number": 30, "page_content": "Translation en-fr InstructGPT CODEX OPT GLM 1 Execution Accuracy 0 Antonyms Cause Selection Passivization Second Letter Sentiment Figure 17: Zero-shot test accuracy on 6 Instruction Induction tasks. We compare the different models' ability to propose instructions and use the same model (i.e., InstructGPT) for selection and execution. InstructGPT CODEX OPT GLM 1 Execution Accuracy 0 Antonyms Cause Selection Passivization Second Letter Sentiment Translation en-fr Figure 18: Zero-shot test accuracy of best performing instructions on 6 Instruction Induction tasks. We compare the different models' ability to propose instructions and use the same model (i.e., InstructGPT) for selection and execution. InstructGPT CODEX OPT - GLM 1 Execution Accuracy 0 Antonyms Cause Selection Passivization Second Letter Sentiment Translation en-fr Figure 19: Few-shot test accuracy on 6 Instruction Induction tasks. We compare the different models' ability to propose instructions and use the same model (i.e., InstructGPT) for selection and execution. InstructGPT CODEX OPT GLM 1 Execution Accuracy 0 Antonyms Cause Selection Passivization Second Letter Sentiment Translation en-fr Figure 20: Few-shot test accuracy of best performing instructions on 6 Instruction Induction tasks. We compare the different models' ability to propose instructions and use the same model (i.e., InstructGPT) for selection and execution. 30"}, {"page_number": 31, "page_content": "Antonyms Cause Selection Passivization InstructGPT 0.82 0.72 0.80 0.62 0.53 0.35 0.62 1.00 1.00 GPT-3 0.65 0.74 0.68 0.23 0.36 0.30 0.41 0.98 0.88 Test Accuracy 1.00 Execution Model Second Letter Sentiment 0.75 0.50 Translation en-fr 0.25 InstructGPT 0.60 0.20 0.77 0.92 0.92 0.88 0.77 0.66 0.73 0.00 GPT-3 0.03 0.24 0.05 0.24 0.84 0.55 0.61 0.75 0.77 InstructGPT GPT-3 Human InstructGPT GPT-3 Human Instruction Proposal/Scoring Model InstructGPT GPT-3 Human Figure 21: Zero-shot test accuracy on 6 Instruction Induction tasks. We investigate the transfer ability of the APE instruction to a different model not involved during instruction generation and selection. Antonyms Cause Selection Passivization InstructGPT 0.83 0.86 0.85 0.84 0.60 0.48 1.00 1.00 1.00 GPT-3 0.72 0.79 0.79 0.36 0.36 0.52 0.91 1.00 1.00 Execution Model Test Accuracy 1.00 0.75 Second Letter Sentiment Translation en-fr InstructGPT 0.84 0.38 0.93 0.94 0.94 0.91 0.78 0.85 0.50 0.25 0.00 0.77 GPT-3 0.09 0.42 0.14 0.57 0.91 0.74 0.70 0.85 0.80 InstructGPT GPT-3 Human InstructGPT GPT-3 Human Instruction Proposal/Scoring Model InstructGPT GPT-3 Human Figure 22: Zero-shot test accuracy of best performing instructions on 6 Instruction Induction tasks. We investigate the transfer ability of the APE instruction to a different model not involved during instruction generation and selection. 31"}, {"page_number": 32, "page_content": "Antonyms Cause Selection Passivization InstructGPT 0.83 0.81 0.83 0.89 0.66 0.90 1.00 1.00 1.00 GPT-3 0.81 0.81 0.82 0.62 0.62 0.60 1.00 1.00 1.00 Execution Model Test Accuracy 1.00 0.75 Second Letter Sentiment Translation en-fr 0.50 InstructGPT 0.55 0.27 0.61 0.93 0.92 0.93 0.88 0.84 0.87 0.25 0.00 GPT-3 0.39 0.30 0.39 0.91 0.91 0.92 0.82 0.80 0.82 InstructGPT GPT-3 Human InstructGPT GPT-3 Human Instruction Proposal/Scoring Model InstructGPT GPT-3 Human Figure 23: Few-shot test accuracy on 6 Instruction Induction tasks. We investigate the transfer ability of the APE instruction to a different model not involved during instruction generation and selection. Antonyms Cause Selection Passivization InstructGPT 0.86 0.87 0.88 1.00 0.84 1.00 1.00 1.00 1.00 GPT-3 0.83 0.83 0.85 0.68 0.76 0.72 1.00 1.00 1.00 Execution Model Test Accuracy 1.00 0.75 0.50 Second Letter Sentiment Translation en-fr 0.25 InstructGPT 0.69 0.37 0.79 0.93 0.94 0.95 0.90 0.87 0.90 0.00 GPT-3 0.52 0.42 0.51 0.93 0.94 0.95 0.84 0.83 0.86 InstructGPT GPT-3 Human InstructGPT GPT-3 Human Instruction Proposal/Scoring Model InstructGPT GPT-3 Human Figure 24: Few-shot test accuracy of best performing instructions on 6 Instruction Induction tasks. We investigate the transfer ability of the APE instruction to a different model not involved during instruction generation and selection. 32"}, {"page_number": 33, "page_content": "Forward (Template 1) Insert (Template 1) Insert (Template 2) 1 Execution Accuracy 0 Passivization Second Letter Starting With Sentence Similarity Synonyms Membership Figure 25: Zero-shot test accuracy on 6 Instruction Induction tasks. We compare the performance of different templates used to propose instruction. Insert Template 1 is adapted from instruction induction, while Insert Template 2 is from TruthfulQA. Forward (Template 1) Insert (Template 1) Insert (Template 2) 1 Execution Accuracy 0 Passivization Second Letter Starting With Sentence Similarity Synonyms Membership Figure 26: Zero-shot test accuracy of best performing instructions on 6 Instruction Induction tasks. We compare the performance of different templates used to propose instruction. Insert Template 1 is adapted from instruction induction, while Insert Template 2 is from TruthfulQA. Forward (Template 1) Insert (Template 1) Insert (Template 2) 1 Execution Accuracy 0 Passivization Second Letter Starting With Sentence Similarity Synonyms Membership Figure 27: Few-shot test accuracy on 6 Instruction Induction tasks. We compare the performance of different templates used to propose instruction. Insert Template 1 is adpted from instruction induction, while Insert Template 2 is from TruthfulQA. Forward (Template 1) Insert (Template 1) Insert (Template 2) 1 Execution Accuracy 0 Passivization Second Letter Starting With Sentence Similarity Synonyms Membership Figure 28: Few-shot test accuracy of best performing instructions on 6 Instruction Induction tasks. We compare the performance of different templates used to propose instruction. Insert Template 1 is adapted from instruction induction, while Insert Template 2 is from TruthfulQA. 33"}, {"page_number": 34, "page_content": "~ 1.0- GPT-3 (350M) GPT-3 (1.3B) GPT-3 (6.7B) GPT-3 (175B) InstructGPT (350M) InstructGPT (1.3B) InstructGPT (6.7B) InstructGPT (175B) 0.8 - 102 0.6 - % instructions with accuracy > T 0.4 - Count 1 10 0.2 - 0.0 0.0 0.2 0.4 0.6 0.8 Test accuracy (T) 1.0 0.0 0.2 0.4 0.6 0 10 0.8 1.0 Test accuracy (T) Figure 29: Survival function and the histogram of test accuracy on a simple task (i.e. Pluralization) ~ 1.0 GPT-3 (350M) GPT-3 (1.3B) GPT-3 (6.7B) GPT-3 (175B) InstructGPT (350M) InstructGPT (1.3B) = InstructGPT (6.7B) InstructGPT (175B) 10\u00b0 ,2 0.8 - 0.6 % instructions with accuracy > T 0.4 - Count : 101 0.2 0.0 0.0 0.2 0.4 0.6 Test accuracy (T) 0.0 0.2 0.4 10 0 0.6 Test accuracy (T) Figure 30: Survival function and the histogram of test accuracy on a challenging task (i.e. Start With) 34"}, {"page_number": 35, "page_content": "GPT-3_S GPT-3_M GPT-3_L GPT-3_XL InstructGPT_S InstructGPT_M InstructGPT_L InstructGPT_XL 1 0 First Letter Second Letter List Letters Starting With Pluralization Passivization Sentiment Sentence Similarity 1 Execution Accuracy 0 Word in Context Negation Antonyms Synonyms Membership Rhymes Large Animal Cause Selection 0 Common Concept Formality Sum Diff Number to Word Translation en-de Translation en-es Translation en-fr (a) Figure 31: Zero-shot test accuracy on 24 Instruction Induction tasks using eight different LLM models. GPT-3_S GPT-3_M GPT-3_L GPT-3_XL InstructGPT_S InstructGPT_M InstructGPT_L InstructGPT_XL 1 0 First Letter Second Letter List Letters Starting With Pluralization Passivization Sentiment Sentence Similarity 1 Execution Accuracy 0 Word in Context Negation Antonyms Synonyms Membership Rhymes Large Animal Cause Selection 1 0 Common Concept Formality Sum Diff Number to Word Translation en-de Translation en-es Translation en-fr (a) Figure 32: Zero-shot test accuracy of best performing instruction on 24 Instruction Induction tasks using eight different LLM models. 35"}, {"page_number": 36, "page_content": "Translation en-de Translation en-es Translation en-fr Word in Context logp_forward logp_insert exec_forward exec_insert 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Figure 33: Zero-shot test accuracy on 24 Instruction Induction tasks using two different metrics and two different LLM models. logp_forward logp_insert exec_forward exec_insert 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 34: Zero-shot test accuracy of best performing instruction on 24 Instruction Induction tasks using two different metrics and two different LLM models. logp_forward logp_insert exec_forward exec_insert 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 35: In-Context learning without instruction on 24 Instruction Induction tasks using two different metrics and two different LLM models. 36"}, {"page_number": 37, "page_content": "Translation en-de Translation en-es Translation en-fr - logp_forward logp_insert - exec_forward exec_insert 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Word in Context Figure 36: In-Context learning without instruction on 24 Instruction Induction tasks using two different metrics and two different LLM models. logp_forward logp_insert exec_forward exec_insert 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 37: Test accuracy of in-Context learning with instruction on 24 Instruction Induction tasks using two different metrics and two different LLM models. logp_forward logp_insert exec_forward exec_insert 1 0 Antonyms Cause Selection Common Concept Diff First Letter Formality Large Animal List Letters 1 Execution Accuracy 0 Membership Negation Number to Word Passivization Pluralization Rhymes Second Letter Sentence Similarity 1 0 Sentiment Starting With Sum Synonyms Translation en-de Translation en-es Translation en-fr Word in Context Figure 38: Test accuracy of in-Context learning with best performing instruction on 24 Instruction Induction tasks using two different metrics and two different LLM models. 37"}, {"page_number": 38, "page_content": "Start 1 2 3 4 5 102 0.8 . 0.6 % instructions with accuracy > T 0.4. 10 Count 0.2 - 0.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) 1.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) \u00b7 10\u00ba 1.0 Figure 39: Iterative Monte Carlo search improves the quality of the instruction candidates at each round. Task: Antonyms. Start 1.0 1 2 3 4 5 0.8 - 0.6 % instructions with accuracy > T 0.4 10 Count 0.2 0.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) 1.0 0.0 0.2 0.4 0.6 10 0.8 1.0 Train accuracy (T) Figure 40: Iterative Monte Carlo search improves the quality of the instruction candidates at each round. Task: Cause Selection. 38"}, {"page_number": 39, "page_content": "Start 1 2 3 4 5 102 0.8 - 0.6 % instructions with accuracy > T 0.4 10 Count 0.2 - 0.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) 1.0 0.0 0.2 0.4 0.6 10\u00b0 0.8 1.0 Train accuracy (T) Figure 41: Iterative Monte Carlo search improves the quality of the instruction candidates at each round. Task: Passivization. Start 1.0 1 2 3 4 5 102 0.8 - 0.6 - % instructions with accuracy > T 0.4 10 Count 0.2 0.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) 1.0 0.0 0.2 0.4 0.6 \u00b7 10 0.8 1.0 Train accuracy (T) Figure 42: Iterative Monte Carlo search improves the quality of the instruction candidates at each round. Task: Second Letter. 39"}, {"page_number": 40, "page_content": "Start 1 2 3 4 5 102 0.8 - 0.6 % instructions with accuracy > T 0.4 Count 10 0.2 - 0.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) 1.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) \u00b7 10\u00ba 1.0 Figure 43: Iterative Monte Carlo search improves the quality of the instruction candidates at each round. Task: Sentiment. Start 1.0 1 2 3 4 5 10 0.8 - 0.6 - % instructions with accuracy > T 10 Count 0.4 0.2 0.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) 1.0 0.0 0.2 0.4 0.6 0.8 Train accuracy (T) - 100 1.0 Figure 44: Iterative Monte Carlo search improves the quality of the instruction candidates at each round. Task: Translation en-fr. 40"}]}